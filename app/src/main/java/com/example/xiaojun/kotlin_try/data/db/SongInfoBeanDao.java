package com.example.xiaojun.kotlin_try.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_INFO_BEAN".
*/
public class SongInfoBeanDao extends AbstractDao<SongInfoBean, Long> {

    public static final String TABLENAME = "SONG_INFO_BEAN";

    /**
     * Properties of entity SongInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SongLocalId = new Property(0, Long.class, "songLocalId", true, "_id");
        public final static Property From = new Property(1, int.class, "from", false, "FROM");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Album = new Property(4, String.class, "album", false, "ALBUM");
        public final static Property Duration = new Property(5, int.class, "duration", false, "DURATION");
        public final static Property CoverPath = new Property(6, String.class, "coverPath", false, "COVER_PATH");
        public final static Property LyrPath = new Property(7, String.class, "lyrPath", false, "LYR_PATH");
        public final static Property SongPath = new Property(8, String.class, "songPath", false, "SONG_PATH");
        public final static Property CoverLink = new Property(9, String.class, "coverLink", false, "COVER_LINK");
        public final static Property LyrLink = new Property(10, String.class, "lyrLink", false, "LYR_LINK");
        public final static Property SongLink = new Property(11, String.class, "songLink", false, "SONG_LINK");
        public final static Property SongId = new Property(12, String.class, "songId", false, "SONG_ID");
        public final static Property AlbumId = new Property(13, String.class, "albumId", false, "ALBUM_ID");
        public final static Property ArtistId = new Property(14, String.class, "artistId", false, "ARTIST_ID");
    }


    public SongInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SongInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: songLocalId
                "\"FROM\" INTEGER NOT NULL ," + // 1: from
                "\"TITLE\" TEXT," + // 2: title
                "\"ARTIST\" TEXT," + // 3: artist
                "\"ALBUM\" TEXT," + // 4: album
                "\"DURATION\" INTEGER NOT NULL ," + // 5: duration
                "\"COVER_PATH\" TEXT," + // 6: coverPath
                "\"LYR_PATH\" TEXT," + // 7: lyrPath
                "\"SONG_PATH\" TEXT," + // 8: songPath
                "\"COVER_LINK\" TEXT," + // 9: coverLink
                "\"LYR_LINK\" TEXT," + // 10: lyrLink
                "\"SONG_LINK\" TEXT," + // 11: songLink
                "\"SONG_ID\" TEXT," + // 12: songId
                "\"ALBUM_ID\" TEXT," + // 13: albumId
                "\"ARTIST_ID\" TEXT);"); // 14: artistId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongInfoBean entity) {
        stmt.clearBindings();
 
        Long songLocalId = entity.getSongLocalId();
        if (songLocalId != null) {
            stmt.bindLong(1, songLocalId);
        }
        stmt.bindLong(2, entity.getFrom());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
        stmt.bindLong(6, entity.getDuration());
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(7, coverPath);
        }
 
        String lyrPath = entity.getLyrPath();
        if (lyrPath != null) {
            stmt.bindString(8, lyrPath);
        }
 
        String songPath = entity.getSongPath();
        if (songPath != null) {
            stmt.bindString(9, songPath);
        }
 
        String coverLink = entity.getCoverLink();
        if (coverLink != null) {
            stmt.bindString(10, coverLink);
        }
 
        String lyrLink = entity.getLyrLink();
        if (lyrLink != null) {
            stmt.bindString(11, lyrLink);
        }
 
        String songLink = entity.getSongLink();
        if (songLink != null) {
            stmt.bindString(12, songLink);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(13, songId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(14, albumId);
        }
 
        String artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindString(15, artistId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongInfoBean entity) {
        stmt.clearBindings();
 
        Long songLocalId = entity.getSongLocalId();
        if (songLocalId != null) {
            stmt.bindLong(1, songLocalId);
        }
        stmt.bindLong(2, entity.getFrom());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
        stmt.bindLong(6, entity.getDuration());
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(7, coverPath);
        }
 
        String lyrPath = entity.getLyrPath();
        if (lyrPath != null) {
            stmt.bindString(8, lyrPath);
        }
 
        String songPath = entity.getSongPath();
        if (songPath != null) {
            stmt.bindString(9, songPath);
        }
 
        String coverLink = entity.getCoverLink();
        if (coverLink != null) {
            stmt.bindString(10, coverLink);
        }
 
        String lyrLink = entity.getLyrLink();
        if (lyrLink != null) {
            stmt.bindString(11, lyrLink);
        }
 
        String songLink = entity.getSongLink();
        if (songLink != null) {
            stmt.bindString(12, songLink);
        }
 
        String songId = entity.getSongId();
        if (songId != null) {
            stmt.bindString(13, songId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(14, albumId);
        }
 
        String artistId = entity.getArtistId();
        if (artistId != null) {
            stmt.bindString(15, artistId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SongInfoBean readEntity(Cursor cursor, int offset) {
        SongInfoBean entity = new SongInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // songLocalId
            cursor.getInt(offset + 1), // from
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album
            cursor.getInt(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // coverPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lyrPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // songPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // coverLink
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lyrLink
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // songLink
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // songId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // albumId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // artistId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongInfoBean entity, int offset) {
        entity.setSongLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.getInt(offset + 5));
        entity.setCoverPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLyrPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSongPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCoverLink(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLyrLink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSongLink(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSongId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAlbumId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setArtistId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SongInfoBean entity, long rowId) {
        entity.setSongLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SongInfoBean entity) {
        if(entity != null) {
            return entity.getSongLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongInfoBean entity) {
        return entity.getSongLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
